// Copyright 2024 International Digital Economy Academy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// rfc8017

pub struct RSAPubKey {
  modulus : BigInt
  exponent : BigInt
  length : Int
}

pub enum RSAPrivKey {
  Pair(~modulus : BigInt, ~exponent : BigInt, ~length : Int)
  Quintuple(
    ~factor1 : BigInt,
    ~factor2 : BigInt,
    ~exponent1 : BigInt,
    ~exponent2 : BigInt,
    ~coefficient : BigInt,
    ~triplets : Array[(BigInt, BigInt, BigInt)],
    ~length : Int
  )
}

pub fn rsassa_pkcs1_v1_5_sign(
  bytes : Iter[Byte],
  priv_key : RSAPrivKey,
  ~hash : HashAlgorithm = SHA256
) -> BigInt {
  match priv_key {
    Pair(~modulus, ~exponent, ~length) => {
      let padded = emsa_pkcs1_v1_5(bytes, length / 8, ~hash)
      let hex = BigInt::from_octets(padded)
      hex.pow(exponent, ~modulus)
    }
    Quintuple(
      factor1=p,
      factor2=q,
      exponent1=dP,
      exponent2=dQ,
      coefficient=qInv,
      ~triplets,
      ~length
    ) => {
      let padded = emsa_pkcs1_v1_5(bytes, length / 8, ~hash)
      let hex = BigInt::from_octets(padded)
      let ss = [
          hex.pow(dP, modulus=p),
          hex.pow(dQ, modulus=q),
          ..triplets.map(fn { (r, d, _) => hex.pow(d, modulus=r) }),
        ]
      let h = (ss[0] - ss[1]) * qInv % p
      let h = if h < 0 { h + p } else { h }
      let mut s = ss[1] + q * h
      let mut r = p
      for i = 3; i < ss.length(); i = i + 1 {
        r += if i == 3 { q } else { triplets[i - 3].0 }
        let h = (ss[i - 1] - s) * triplets[i - 3].2 % r
        let h = if h < 0 { h + r } else { h }
        s += r * h
      }
      s
    }
  }
}

pub fn rsassa_pkcs1_v1_5_verify(
  bytes : Iter[Byte],
  modulus : BigInt,
  exponent : BigInt,
  signature : BigInt,
  ~hash : HashAlgorithm = SHA256,
  ~length : Int = 2048
) -> Bool {
  let padded = emsa_pkcs1_v1_5(bytes, length / 8, ~hash)
  let number = BigInt::from_octets(padded)
  let decoded = signature.pow(exponent, ~modulus)
  number == decoded
}

fn emsa_pkcs1_v1_5(
  message : Iter[Byte],
  emLen : Int,
  ~hash : HashAlgorithm = SHA256
) -> Bytes {
  let h = hash.hash(message)
  let digest_info : X690 = {
    tag: Sequence,
    class: Universal,
    construction: Constructed,
    content: {
      let buffer = Buffer::new()
      buffer.write_bytes(hash.pkcs1_v1_5_digest_algorithms().to_bytes())
      buffer.write_bytes(
        {
          tag: OctetString,
          construction: Primitive,
          class: Universal,
          content: h,
        }.to_bytes(),
      )
      buffer.to_bytes()
    },
  }
  let t = digest_info.to_bytes()
  let tLen = t.length()
  if emLen < tLen + 11 {
    abort("intended encoded message length too short")
  }
  let ps = Bytes::make(emLen - tLen - 3, b'\xff')
  let em = Bytes::new(emLen)
  em[0] = b'\x00'
  em[1] = b'\x01'
  em.blit(2, ps, 0, emLen - tLen - 3)
  em.blit(emLen - tLen, t, 0, tLen)
  em
}

test "rsa" {
  let result = Buffer::new()
  let metadata = "ewogICAgInR5cCI6IkpXVCIsCiAgICAiYWxnIjoiUlMyNTYiCn0"
  metadata.iter()
  |> @utils.base64_decode(url_safe=true)
  |> @utils.decode_utf8
  |> Iter::each(fn(ch) { result.write_char(ch) })
  inspect!(
    result,
    content=
      #|{
      #|    "typ":"JWT",
      #|    "alg":"RS256"
      #|}
    ,
  )
  let result = Buffer::new()
  let payload = "ewogICAgImlhdCI6MTcyNDY2NTI5OSwKICAgICJleHAiOjE3MjQ2NjU5NTksCiAgICAiaXNzIjoiMDEyMzQ1NiIKfQ"
  payload.iter()
  |> @utils.base64_decode(url_safe=true)
  |> @utils.decode_utf8
  |> Iter::each(fn(ch) { result.write_char(ch) })
  inspect!(
    result,
    content=
      #|{
      #|    "iat":1724665299,
      #|    "exp":1724665959,
      #|    "iss":"0123456"
      #|}
    ,
  )
  let expected_crypto = "YboVGRddJwc0xNxJdeXbmqr5yoPEEIMPdPiOldRfLFYY_n4HAfJbcSrhq4kujTfHPbKh2FGpTTPokenpy20PIo_dWDpKCqznyRi4POxzir4jdVYjhLlrDdbukBXz74FIBfXSMb6eXexcj9p9luZEHW5UvpaP8SuLCMdMkWnQxqSbW4_0xHjiv5ArDzQNm555k2Dm1c7SS-CCLBTLqlQVHMlyGl8MbmTu5LC2SZGD2I9CkaV1AG8qhkg5x18V5QCP4Dkt4SItbMHZ4P_b26ERWqtVU6nlxcfc5MYTXkunxo7nNOc9s8bLqj8IyEsypKyQSpaPHx0AUYqUHROn0VxQJg"
  let result = expected_crypto.iter()
    |> @utils.base64_decode(url_safe=true)
    |> Bytes::from_iter
    |> BigInt::from_octets
  inspect!(
    result,
    content="12336876240073044691363348029232808676135926590206971952196911483742729576836331419031013729995533308920892847804477366807900775106825520014829072227799175150246374808128189555465436634256771610222707804065296574923289612453196593632950519889577844986734552374418264362027558180968325124961932927862989847435381033745147022712443840817991902692892235069349377412037652850557739811522619415437024648105910046624954430726805970890913344467239592315917473170805458886272628321543972071291521099051469975387420351261587741406802643300778392459086794143986805782051435582873966464392943983621144758377947791035112053559334",
  )
  inspect!(
    rsassa_pkcs1_v1_5_sign(
      "\{metadata}.\{payload}".iter()
      |> @utils.encode_utf8
      |> Iter::flat_map(Bytes::iter),
      Pair(
        modulus=22959099950256034890559187556292927784453557983859951626187028542267181746291385208056952622270636003785108992159340113537813968453561739504619062411001131648757071588488220532539782545200321908111599592636973146194058056564924259042296638315976224316360033845852318938823607436658351875086984433074463158236223344828240703648004620467488645622229309082546037826549150096614213390716798147672946512459617730148266423496997160777227482475009932013242738610000405747911162773880928277363924192388244705316312909258695267385559719781821111399096063487484121831441128099512811105145553708218511125708027791532622990325823N,
        exponent=16358669625969388364581104141609389441427641540112063431899987561373091823318469317720180350787335685685177067883371926419606650760753757234961803841251641721018054151029890687512057093407910521097689161508401331075235897422153946629218362494511890545443766734301537836143051602334534677496098769959643127347674117653709560862767683574314126433987860854784002134418813937006574680192217906111795338155415665645853395279769810629758251647311243087303558250016935003936529217269852298186721078356080852876661955868636203495771866307776451235934278538058313992364138792492433515133366470972760378174187477470341640818497N,
        length=2048,
      ),
    ),
    content="12336876240073044691363348029232808676135926590206971952196911483742729576836331419031013729995533308920892847804477366807900775106825520014829072227799175150246374808128189555465436634256771610222707804065296574923289612453196593632950519889577844986734552374418264362027558180968325124961932927862989847435381033745147022712443840817991902692892235069349377412037652850557739811522619415437024648105910046624954430726805970890913344467239592315917473170805458886272628321543972071291521099051469975387420351261587741406802643300778392459086794143986805782051435582873966464392943983621144758377947791035112053559334",
  )
  inspect!(
    rsassa_pkcs1_v1_5_sign(
      "\{metadata}.\{payload}".iter()
      |> @utils.encode_utf8
      |> Iter::flat_map(Bytes::iter),
      Quintuple(
        factor1=158821241699809206379240050294221818859001463459205644463993958696866240205418400547814030766307080042644584970991123482171161583230900837955310531800680184932587150955639915773936331321003111715999458161371827010867661548650955374527536555325452958621842263169220276485047984007097022393251387885340530860307N,
        factor2=144559378232613426908794876466633326578667289294577002125292145506864779092898829854943791512321347393777270116500424839118627337516633149490501210130514723656399948087736749754645662330251897374131452601460606973492794865585239015629328445163471765624481912162148836170882664246068101421643700397030187015589,
        exponent1=81806134795008306448937338873949767905508528037481192916536369741216620696924011585708198980396235729428464147973623378971449739309481965711848537803005340536938591250889369925092218691778721061339300077108026983320256510029606185481881250257431916691296966260331856406392797902369259882646247170994099520139N,
        exponent2=81571484297729178029420683379046447811247005895948122672618960785348221548659408072778374870945507850058397945867253779932648085336567290252959782288425850977880075075645707656385724684301164484073962016183449143029693866429768284129395535813210085364892588822625785593411535567448074502552843193655085616117N,
        coefficient=107767393137383684863285837530603262713505272336046170826402760673649439044164043252947591339783152332586428778090896779512434195821769203110139749156110797117634251017717788024337765459090675461882635600440921636154961089307247094064639739966306348042851661545457199055016518128892220899785968564685096557341N,
        triplets=[],
        length=2048,
      ),
    ),
    content="12336876240073044691363348029232808676135926590206971952196911483742729576836331419031013729995533308920892847804477366807900775106825520014829072227799175150246374808128189555465436634256771610222707804065296574923289612453196593632950519889577844986734552374418264362027558180968325124961932927862989847435381033745147022712443840817991902692892235069349377412037652850557739811522619415437024648105910046624954430726805970890913344467239592315917473170805458886272628321543972071291521099051469975387420351261587741406802643300778392459086794143986805782051435582873966464392943983621144758377947791035112053559334",
  )
  assert_true!(
    rsassa_pkcs1_v1_5_verify(
      "\{metadata}.\{payload}".iter()
      |> @utils.encode_utf8
      |> Iter::flat_map(Bytes::iter),
      22959099950256034890559187556292927784453557983859951626187028542267181746291385208056952622270636003785108992159340113537813968453561739504619062411001131648757071588488220532539782545200321908111599592636973146194058056564924259042296638315976224316360033845852318938823607436658351875086984433074463158236223344828240703648004620467488645622229309082546037826549150096614213390716798147672946512459617730148266423496997160777227482475009932013242738610000405747911162773880928277363924192388244705316312909258695267385559719781821111399096063487484121831441128099512811105145553708218511125708027791532622990325823N,
      65537N,
      12336876240073044691363348029232808676135926590206971952196911483742729576836331419031013729995533308920892847804477366807900775106825520014829072227799175150246374808128189555465436634256771610222707804065296574923289612453196593632950519889577844986734552374418264362027558180968325124961932927862989847435381033745147022712443840817991902692892235069349377412037652850557739811522619415437024648105910046624954430726805970890913344467239592315917473170805458886272628321543972071291521099051469975387420351261587741406802643300778392459086794143986805782051435582873966464392943983621144758377947791035112053559334N,
    ),
  )
  let buffer = Buffer::new()
  [
    12336876240073044691363348029232808676135926590206971952196911483742729576836331419031013729995533308920892847804477366807900775106825520014829072227799175150246374808128189555465436634256771610222707804065296574923289612453196593632950519889577844986734552374418264362027558180968325124961932927862989847435381033745147022712443840817991902692892235069349377412037652850557739811522619415437024648105910046624954430726805970890913344467239592315917473170805458886272628321543972071291521099051469975387420351261587741406802643300778392459086794143986805782051435582873966464392943983621144758377947791035112053559334N
    |> BigInt::to_octets,
  ].iter()
  |> @utils.base64_encode(url_safe=true)
  |> Iter::filter(fn(ch) { ch != '=' })
  |> Iter::each(fn(ch) { buffer.write_char(ch) })
  inspect!(
    buffer.to_string(),
    content="YboVGRddJwc0xNxJdeXbmqr5yoPEEIMPdPiOldRfLFYY_n4HAfJbcSrhq4kujTfHPbKh2FGpTTPokenpy20PIo_dWDpKCqznyRi4POxzir4jdVYjhLlrDdbukBXz74FIBfXSMb6eXexcj9p9luZEHW5UvpaP8SuLCMdMkWnQxqSbW4_0xHjiv5ArDzQNm555k2Dm1c7SS-CCLBTLqlQVHMlyGl8MbmTu5LC2SZGD2I9CkaV1AG8qhkg5x18V5QCP4Dkt4SItbMHZ4P_b26ERWqtVU6nlxcfc5MYTXkunxo7nNOc9s8bLqj8IyEsypKyQSpaPHx0AUYqUHROn0VxQJg",
  )
}
